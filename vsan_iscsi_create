function handler($context, $inputs) {
  
  $myVC_url = $inputs.VC_url
  $myVC_user = $inputs.VC_user
  $myVC_pass = $context.getsecret($inputs.VC_pass)
  $myVMK = $inputs.vSAN_iSCSI_VMK
  $myLUN = $inputs.vSAN_iSCSI_LUN_Prefix
  $myTarget = $inputs.vSAN_iSCSI_Target
  $myCluster = $inputs.vSAN_Cluster_Name
  $number_of_data_luns = $inputs.vSAN_iSCSI_dataluns
  $lun_size = $inputs.vSAN_iSCSI_lunSize
  
  
  Write-Host $myVC_url
  
  #
  # Make sure we have just a hostname 
  
  #
  if ($myVC_url | select-string -Pattern http) { 
      $myVC_url = ([uri]$myVC_url).Host 
      
  }
  
  Write-Host $myVC_url
  
  #
  # Check if we need to create anything first
  #
  
  if ($number_of_data_luns -lt 1) { 
      Write-Host "no data luns needed... abort: $number_of_data_luns"
      exit
  }
  
  #
  # Check variables 
  #
  
  if ($lun_size -lt 1) { 
      Write-Host "invalid lun size... abort: $lun_size"
      exit
  }
  if ($myTarget -lt 1) { 
      Write-Host "invalid target... abort: $lun_size"
      exit
  }
  if ($myCluster -lt 1) { 
      Write-Host "invalid cluster... abort: $lun_size"
      exit
  }
  if ($myVMK -lt 1) { 
      Write-Host "invalid VMK... abort: $lun_size"
      exit
  }  

  
  
  #
  # Connect to vCenter using the credentials supplied in the 'action constants'
  #
  if ($connection = Connect-VIServer -Server $myVC_url -User $myVC_user -Password $myVC_pass -Protocol https -Force)
  {
      Write-Host 'Connected: ' $connection.IsConnected
  }
  else
  {
      Write-Host "Can't Connect... check details"
      exit
  }
  

  
  #
  # Check if the iSCSI service is enabled and apply if not
  #
  
  $iscsiServ = Get-VsanClusterConfiguration -Cluster $myCluster
  Write-Host 'iSCSI Enabled: ' $iscsiServ.IscsiTargetServiceEnabled
  
  if ( $iscsiServ.IscsiTargetServiceEnabled ) {
      Write-Host "iSCSI already enabled on Cluster " $myCluster
  }
  else {
      Write-Host 'Enabling iSCSI'

      $config = Get-VsanClusterConfiguration -Cluster $myCluster
      if (Set-VsanClusterConfiguration $config -IscsiTargetServiceEnabled $true -DefaultIscsiNetworkInterface $myVMK)
      {
          $iscsiServ = Get-VsanClusterConfiguration -Cluster $myCluster
          Write-Host 'iSCSI Enabled: ' $iscsiServ.IscsiTargetServiceEnabled
      }
      else
      {
          Write-Host "Error Enabling iSCSI"
          exit   
      }
  }
  

  #
  # Check if target exists & create
  #
  
  $share = Get-VsanIscsiTarget -Name $myTarget -Cluster $myCluster
  
  if ( -Not $share ) {
      Write-Host "Target not found, creating..."
      $share = New-VsanIscsiTarget -Cluster $myCluster -Name $myTarget
  }  


  #
  # Get the next avail lun number
  #
  
  
  $lun = ((get-vsaniscsilun).LunId | measure -Maximum).maximum+1
  
 
  #
  # Check and Create shared LUNS for iSCSI as needed
  #
  

 
  $luns = $lun..($number_of_data_luns+$lun)
 
  foreach ($lun in $luns) {
      $this_lun = $myLUN + '-' + $lun
      Write-Host 'this lun: ' $this_lun
      
      $lun_test = Get-VsanIscsiLun -target $myTarget -Cluster $myCluster| where { $_.Name -like $this_lun }
      Write-Host 'lun_test: ' $lun_test
      
      
      if (-Not $lun_test) {
          Write-Host "lun $lun not found: creating"
          New-VsanIscsiLun -CapacityGB $lun_size -Name $this_lun -LunId $lun -Target $myTarget
          
          $new_lun_test = Get-VsanIscsiLun -target $myTarget -Cluster $myCluster | where { $_.Name -like $this_lun }
          Write-Host 'new_lun_test: ' $new_lun_test
      }
  }

 
  
  
  #
  # Get the iSCSI share owner host and IP address
  #
  
  $host_adapter = Get-VMHostNetworkAdapter -Host $share.IoOwnerVMHost -Name $myVMK
  $share_ip = $host_adapter.IP
  $share_Id = $share.Id
  $share_iqn = $share.IscsiQualifiedName
  
  $all_host_ips = (Get-VMHostNetworkAdapter -Name $myVMK).ip
  

  
  $shareDetails = [PSCustomObject]@{
      HostName = $share.IoOwnerVMHost
      IP       = $share_ip
      LUNS     = $found_luns
      vSAN_iSCSI_Target   = $myTarget
      vSAN_Cluster_Name = $myCluster
      vSAN_iSCSI_LUN_Prefix = $myLUN
      vSAN_iSCSI_VMK = $myVMK
      vSAN_iSCSI_Id = $share_Id
      vSAN_iSCSI_iqn = $share_iqn
      ALL_HOST_IPS = $all_host_ips
  }
  
  
  # Disconnect cleanly
  Disconnect-VIServer -Server $myVC_url -Confirm:$false
  
  return $shareDetails
}
